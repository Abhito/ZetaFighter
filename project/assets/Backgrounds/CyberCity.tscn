[gd_scene load_steps=14 format=2]

[ext_resource path="res://assets/Backgrounds/CyberCity.gd" type="Script" id=1]
[ext_resource path="res://images/layers/back-buildings.png" type="Texture" id=2]
[ext_resource path="res://images/layers/foreground.png" type="Texture" id=3]
[ext_resource path="res://images/layers/far-buildings.png" type="Texture" id=4]
[ext_resource path="res://music/cyberpunk-street.wav" type="AudioStream" id=5]

[sub_resource type="Shader" id=9]
code = "shader_type canvas_item;
// Which color you want to change
uniform vec4 u_color_key : hint_color;
// Which color to replace it with
uniform vec4 u_replacement_color : hint_color;
// How much tolerance for the replacement color (between 0 and 1)
uniform float u_tolerance;

void fragment() {
    // Get color from the sprite texture at the current pixel we are rendering
    vec4 original_color = texture(TEXTURE, UV);
    vec3 col = original_color.rgb;
    // Get a rough degree of difference between the texture color and the color key
    vec3 diff3 = col - u_color_key.rgb;
    float m = max(max(abs(diff3.r), abs(diff3.g)), abs(diff3.b));
    // Change color of pixels below tolerance threshold, while keeping shades if any (a bit naive, there may better ways)
    float brightness = length(col);
    col = mix(col, u_replacement_color.rgb * brightness, step(m, u_tolerance));
    // Assign final color for the pixel, and preserve transparency
    COLOR = vec4(col.rgb, original_color.a);
}"

[sub_resource type="ShaderMaterial" id=8]
shader = SubResource( 9 )
shader_param/u_color_key = Color( 0.764706, 0, 1, 1 )
shader_param/u_replacement_color = Color( 1.50196, 0.00392157, 0.00392157, 1 )
shader_param/u_tolerance = 0.6

[sub_resource type="Shader" id=10]
code = "shader_type canvas_item;
// Which color you want to change
uniform vec4 u_color_key : hint_color;
// Which color to replace it with
uniform vec4 u_replacement_color : hint_color;
// How much tolerance for the replacement color (between 0 and 1)
uniform float u_tolerance;

void fragment() {
    // Get color from the sprite texture at the current pixel we are rendering
    vec4 original_color = texture(TEXTURE, UV);
    vec3 col = original_color.rgb;
    // Get a rough degree of difference between the texture color and the color key
    vec3 diff3 = col - u_color_key.rgb;
    float m = max(max(abs(diff3.r), abs(diff3.g)), abs(diff3.b));
    // Change color of pixels below tolerance threshold, while keeping shades if any (a bit naive, there may better ways)
    float brightness = length(col);
    col = mix(col, u_replacement_color.rgb * brightness, step(m, u_tolerance));
    // Assign final color for the pixel, and preserve transparency
    COLOR = vec4(col.rgb, original_color.a);
}"

[sub_resource type="ShaderMaterial" id=11]
shader = SubResource( 10 )
shader_param/u_color_key = Color( 0.835294, 0.709804, 0, 1 )
shader_param/u_replacement_color = Color( 1.5, 0.59, 0, 1 )
shader_param/u_tolerance = 0.3

[sub_resource type="Shader" id=14]
code = "shader_type canvas_item;
// Which color you want to change
uniform vec4 u_color_key : hint_color;
// Which color to replace it with
uniform vec4 u_replacement_color : hint_color;
// How much tolerance for the replacement color (between 0 and 1)
uniform float u_tolerance;

void fragment() {
    // Get color from the sprite texture at the current pixel we are rendering
    vec4 original_color = texture(TEXTURE, UV);
    vec3 col = original_color.rgb;
    // Get a rough degree of difference between the texture color and the color key
    vec3 diff3 = col - u_color_key.rgb;
    float m = max(max(abs(diff3.r), abs(diff3.g)), abs(diff3.b));
    // Change color of pixels below tolerance threshold, while keeping shades if any (a bit naive, there may better ways)
    float brightness = length(col);
    col = mix(col, u_replacement_color.rgb * brightness, step(m, u_tolerance));
    // Assign final color for the pixel, and preserve transparency
    COLOR = vec4(col.rgb, original_color.a);
}"

[sub_resource type="ShaderMaterial" id=15]
shader = SubResource( 14 )
shader_param/u_color_key = Color( 1, 0.501961, 0.00784314, 1 )
shader_param/u_replacement_color = Color( 1, 0.588235, 0, 1 )
shader_param/u_tolerance = 0.3

[sub_resource type="Animation" id=12]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("ParallaxBackground/ParallaxLayer/Sprite:material:shader_param/u_replacement_color")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 1.50196, 0.00392157, 0.00392157, 1 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("ParallaxBackground/ParallaxLayer3/Sprite:material:shader_param/u_replacement_color")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 1, 0.588235, 0, 1 ) ]
}

[sub_resource type="Animation" id=13]
resource_name = "lights"
length = 2.0
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("ParallaxBackground/ParallaxLayer/Sprite:material:shader_param/u_replacement_color")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ Color( 1.50196, 0.00392157, 0.00392157, 1 ), Color( 0, 0, 0, 1 ), Color( 1.50196, 0.00392157, 0.00392157, 1 ), Color( 0, 0, 0, 1 ), Color( 1.50196, 0.00392157, 0.00392157, 1 ), Color( 0, 0, 0, 1 ), Color( 1.50196, 0.00392157, 0.00392157, 1 ), Color( 0, 0, 0, 1 ), Color( 1.50196, 0.00392157, 0.00392157, 1 ), Color( 0, 0, 0, 1 ), Color( 1.50196, 0.00392157, 0.00392157, 1 ), Color( 0, 0, 0, 1 ), Color( 1.50196, 0.00392157, 0.00392157, 1 ), Color( 0, 0, 0, 1 ), Color( 1.50196, 0.00392157, 0.00392157, 1 ), Color( 0, 0, 0, 1 ), Color( 1.50196, 0.00392157, 0.00392157, 1 ), Color( 0, 0, 0, 1 ), Color( 1.50196, 0.00392157, 0.00392157, 1 ), Color( 0, 0, 0, 1 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("ParallaxBackground/ParallaxLayer3/Sprite:material:shader_param/u_replacement_color")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.7, 1.3, 2 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 0,
"values": [ Color( 1, 0.588235, 0, 1 ), Color( 1.5, 0.59, 0, 1 ), Color( 1.5, 0.59, 0, 1 ), Color( 1, 0.588235, 0, 1 ) ]
}

[node name="Background" type="Node2D"]
pause_mode = 2
script = ExtResource( 1 )

[node name="ParallaxBackground" type="ParallaxBackground" parent="."]

[node name="ParallaxLayer" type="ParallaxLayer" parent="ParallaxBackground"]
motion_scale = Vector2( 0.2, 1 )
motion_mirroring = Vector2( 960, 0 )

[node name="Sprite" type="Sprite" parent="ParallaxBackground/ParallaxLayer"]
material = SubResource( 8 )
position = Vector2( 640, 360 )
scale = Vector2( 3.75, 3.75 )
texture = ExtResource( 4 )

[node name="ParallaxLayer2" type="ParallaxLayer" parent="ParallaxBackground"]
motion_scale = Vector2( 0.3, 1 )
motion_mirroring = Vector2( 960, 0 )

[node name="Sprite" type="Sprite" parent="ParallaxBackground/ParallaxLayer2"]
material = SubResource( 11 )
position = Vector2( 640, 360 )
scale = Vector2( 3.75, 3.75 )
texture = ExtResource( 2 )

[node name="ParallaxLayer3" type="ParallaxLayer" parent="ParallaxBackground"]
motion_mirroring = Vector2( 1320, 0 )

[node name="Sprite" type="Sprite" parent="ParallaxBackground/ParallaxLayer3"]
material = SubResource( 15 )
position = Vector2( 640, 360 )
scale = Vector2( 3.75, 3.75 )
texture = ExtResource( 3 )

[node name="AudioStreamPlayer" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 5 )
volume_db = -15.0
autoplay = true

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/RESET = SubResource( 12 )
anims/lights = SubResource( 13 )
