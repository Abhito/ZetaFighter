[gd_scene load_steps=20 format=2]

[ext_resource path="res://Themes/health_bar.tres" type="Theme" id=1]
[ext_resource path="res://scripts/FightArea.gd" type="Script" id=2]
[ext_resource path="res://scripts/CameraController.gd" type="Script" id=3]
[ext_resource path="res://music/cyberpunk-street.wav" type="AudioStream" id=4]
[ext_resource path="res://images/layers/foreground.png" type="Texture" id=5]
[ext_resource path="res://images/layers/far-buildings.png" type="Texture" id=6]
[ext_resource path="res://images/layers/back-buildings.png" type="Texture" id=7]
[ext_resource path="res://materials/glow_material.tres" type="Material" id=8]

[sub_resource type="Shader" id=9]
code = "shader_type canvas_item;
// Which color you want to change
uniform vec4 u_color_key : hint_color;
// Which color to replace it with
uniform vec4 u_replacement_color : hint_color;
// How much tolerance for the replacement color (between 0 and 1)
uniform float u_tolerance;

void fragment() {
    // Get color from the sprite texture at the current pixel we are rendering
    vec4 original_color = texture(TEXTURE, UV);
    vec3 col = original_color.rgb;
    // Get a rough degree of difference between the texture color and the color key
    vec3 diff3 = col - u_color_key.rgb;
    float m = max(max(abs(diff3.r), abs(diff3.g)), abs(diff3.b));
    // Change color of pixels below tolerance threshold, while keeping shades if any (a bit naive, there may better ways)
    float brightness = length(col);
    col = mix(col, u_replacement_color.rgb * brightness, step(m, u_tolerance));
    // Assign final color for the pixel, and preserve transparency
    COLOR = vec4(col.rgb, original_color.a);
}"

[sub_resource type="ShaderMaterial" id=8]
shader = SubResource( 9 )
shader_param/u_color_key = Color( 0.764706, 0, 1, 1 )
shader_param/u_replacement_color = Color( 1.5, 0, 0, 1 )
shader_param/u_tolerance = 0.6

[sub_resource type="Shader" id=10]
code = "shader_type canvas_item;
// Which color you want to change
uniform vec4 u_color_key : hint_color;
// Which color to replace it with
uniform vec4 u_replacement_color : hint_color;
// How much tolerance for the replacement color (between 0 and 1)
uniform float u_tolerance;

void fragment() {
    // Get color from the sprite texture at the current pixel we are rendering
    vec4 original_color = texture(TEXTURE, UV);
    vec3 col = original_color.rgb;
    // Get a rough degree of difference between the texture color and the color key
    vec3 diff3 = col - u_color_key.rgb;
    float m = max(max(abs(diff3.r), abs(diff3.g)), abs(diff3.b));
    // Change color of pixels below tolerance threshold, while keeping shades if any (a bit naive, there may better ways)
    float brightness = length(col);
    col = mix(col, u_replacement_color.rgb * brightness, step(m, u_tolerance));
    // Assign final color for the pixel, and preserve transparency
    COLOR = vec4(col.rgb, original_color.a);
}"

[sub_resource type="ShaderMaterial" id=11]
shader = SubResource( 10 )
shader_param/u_color_key = Color( 0.835294, 0.709804, 0, 1 )
shader_param/u_replacement_color = Color( 1.5, 0.59, 0, 1 )
shader_param/u_tolerance = 0.3

[sub_resource type="Gradient" id=2]
offsets = PoolRealArray( 0, 0.995192, 1 )
colors = PoolColorArray( 0, 0, 0, 1, 0.956055, 0, 0, 1, 0.965517, 0.965517, 0.965517, 1 )

[sub_resource type="GradientTexture" id=3]
gradient = SubResource( 2 )

[sub_resource type="RectangleShape2D" id=1]
extents = Vector2( 640, 34 )

[sub_resource type="RectangleShape2D" id=4]
extents = Vector2( 16, 451.5 )

[sub_resource type="Environment" id=5]
background_mode = 4
glow_enabled = true
glow_levels/4 = true
glow_levels/5 = false
glow_intensity = 0.1
glow_blend_mode = 0
glow_hdr_threshold = 1.5
glow_hdr_luminance_cap = 2.0
glow_bicubic_upscale = true

[sub_resource type="Animation" id=6]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("ParallaxBackground/ParallaxLayer3/Sprite:self_modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("ParallaxBackground/ParallaxLayer3/Sprite:material:shader_param/u_replacement_color")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 1.5, 0.59, 0, 1 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("ParallaxBackground/ParallaxLayer/Sprite:material:shader_param/u_replacement_color")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 1.5, 0, 0, 1 ) ]
}

[sub_resource type="Animation" id=7]
resource_name = "lights"
length = 2.0
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("ParallaxBackground/ParallaxLayer3/Sprite:material:shader_param/u_replacement_color")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.7, 1.3, 2 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 0,
"values": [ Color( 1, 0.588235, 0, 1 ), Color( 1.5, 0.59, 0, 1 ), Color( 1.5, 0.59, 0, 1 ), Color( 1, 0.588235, 0, 1 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("ParallaxBackground/ParallaxLayer/Sprite:material:shader_param/u_replacement_color")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ Color( 1.50196, 0.00392157, 0.00392157, 1 ), Color( 0, 0, 0, 1 ), Color( 1.5, 0, 0, 1 ), Color( 0, 0, 0, 1 ), Color( 1.50196, 0.00392157, 0.00392157, 1 ), Color( 0, 0, 0, 1 ), Color( 1.50196, 0.00392157, 0.00392157, 1 ), Color( 0, 0, 0, 1 ), Color( 1.5, 0, 0, 1 ), Color( 0, 0, 0, 1 ), Color( 1.5, 0, 0, 1 ), Color( 0, 0, 0, 1 ), Color( 1.5, 0, 0, 1 ), Color( 0, 0, 0, 1 ), Color( 1.5, 0, 0, 1 ), Color( 0, 0, 0, 1 ), Color( 1.5, 0, 0, 1 ), Color( 0, 0, 0, 1 ), Color( 1.5, 0, 0, 1 ), Color( 0, 0, 0, 1 ) ]
}

[node name="FightArea" type="Node2D"]
script = ExtResource( 2 )

[node name="ParallaxBackground" type="ParallaxBackground" parent="."]

[node name="ParallaxLayer" type="ParallaxLayer" parent="ParallaxBackground"]
motion_scale = Vector2( 0.2, 1 )
motion_mirroring = Vector2( 960, 0 )

[node name="Sprite" type="Sprite" parent="ParallaxBackground/ParallaxLayer"]
material = SubResource( 8 )
position = Vector2( 640, 360 )
scale = Vector2( 3.75, 3.75 )
texture = ExtResource( 6 )

[node name="ParallaxLayer2" type="ParallaxLayer" parent="ParallaxBackground"]
motion_scale = Vector2( 0.3, 1 )
motion_mirroring = Vector2( 960, 0 )

[node name="Sprite" type="Sprite" parent="ParallaxBackground/ParallaxLayer2"]
material = SubResource( 11 )
position = Vector2( 640, 360 )
scale = Vector2( 3.75, 3.75 )
texture = ExtResource( 7 )

[node name="ParallaxLayer3" type="ParallaxLayer" parent="ParallaxBackground"]
motion_mirroring = Vector2( 1320, 0 )

[node name="Sprite" type="Sprite" parent="ParallaxBackground/ParallaxLayer3"]
material = ExtResource( 8 )
position = Vector2( 640, 360 )
scale = Vector2( 3.75, 3.75 )
texture = ExtResource( 5 )

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="Control" type="Control" parent="CanvasLayer"]
margin_right = 1280.0
margin_bottom = 728.0

[node name="Button" type="Button" parent="CanvasLayer/Control"]
margin_left = 1160.0
margin_top = 688.0
margin_right = 1280.0
margin_bottom = 720.0
text = "Back"

[node name="Player1" type="ProgressBar" parent="CanvasLayer/Control"]
margin_left = 64.0
margin_right = 512.0
margin_bottom = 64.0
theme = ExtResource( 1 )
percent_visible = false

[node name="Player2" type="ProgressBar" parent="CanvasLayer/Control"]
anchor_top = 0.011
anchor_bottom = 0.011
margin_left = 1216.0
margin_top = -8.008
margin_right = 1664.0
margin_bottom = 55.992
rect_scale = Vector2( -1, 1 )
theme = ExtResource( 1 )
percent_visible = false

[node name="Camera2D" type="Camera2D" parent="."]
position = Vector2( 640, 544 )
current = true
limit_left = 0
limit_right = 1280
limit_bottom = 720
smoothing_speed = 3.0
script = ExtResource( 3 )
min_zoom = 0.1
max_zoom = 1
margin = Vector2( 100, 50 )

[node name="Player1" type="Node2D" parent="."]
position = Vector2( 72, 588 )

[node name="Player2" type="Node2D" parent="."]
position = Vector2( 1156, 592 )

[node name="Ground" type="StaticBody2D" parent="." groups=["Ground"]]
visible = false
position = Vector2( 16, 648 )
collision_mask = 0

[node name="texture" type="Sprite" parent="Ground"]
visible = false
position = Vector2( 624, 39 )
scale = Vector2( 0.625, 70 )
texture = SubResource( 3 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="Ground"]
position = Vector2( 624, 38 )
shape = SubResource( 1 )

[node name="StaticBody2D" type="StaticBody2D" parent="."]
visible = false
collision_layer = 9
collision_mask = 15

[node name="CollisionShape2D2" type="CollisionShape2D" parent="StaticBody2D"]
position = Vector2( 1296, 279 )
shape = SubResource( 4 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="StaticBody2D"]
position = Vector2( -16, 272 )
shape = SubResource( 4 )

[node name="AudioStreamPlayer" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 4 )
volume_db = -10.0
autoplay = true

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 5 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/RESET = SubResource( 6 )
anims/lights = SubResource( 7 )

[connection signal="pressed" from="CanvasLayer/Control/Button" to="." method="_on_Button_pressed"]
